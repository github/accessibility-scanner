name: "accessibility-scanner"
description: "Finds potential accessibility gaps, files GitHub issues to track them, and attempts to fix them with Copilot."

inputs:
  urls:
    description: "Newline-delimited list of URLs to check for accessibility issues"
    required: true
    multiline: true
  repository:
    description: "Repository (with owner) to file issues in"
    required: true
  token:
    description: "Personal access token (PAT) with fine-grained permissions 'contents: write', 'issues: write', and 'pull_requests: write'"
    required: true
  cache_key:
    description: "Key for caching results across runs"
    required: true
  login_url:
    description: "If scanned pages require authentication, the URL of the login page"
    required: false
  username:
    description: "If scanned pages require authentication, the username to use for login"
    required: false
  password:
    description: "If scanned pages require authentication, the password to use for login"
    required: false
  auth_context:
    description: "If scanned pages require authentication, a stringified JSON object containing 'username', 'password', 'cookies', and/or 'localStorage' from an authenticated session"
    required: false
  skip_copilot_assignment:
    description: "Whether to skip assigning filed issues to Copilot"
    required: false
    default: "false"

outputs:
  results:
    description: "List of issues and pull requests filed (and their associated finding(s)), as stringified JSON"

runs:
  using: "composite"
  steps:
    - name: Restore cached results
      id: restore
      uses: github/accessibility-scanner/.github/actions/gh-cache/cache@smockle/backport-10-and-11-testing
      with:
        key: ${{ inputs.cache_key }}
        token: ${{ inputs.token }}
    - if: ${{ steps.restore.outputs.value }}
      name: Normalize cache format
      id: normalize_cache
      shell: bash
      run: |
        # Migrate cache format from v1 to v2:
        # If cached data is a list of Finding objects, each with 'issueUrl' keys (i.e. v1),
        # convert to a list of (partial) Result objects, each with 'findings' and 'issue' keys (i.e. v2).
        # Otherwise, re-output as-is.
        printf '%s' "value=$(printf '%s' '${{ steps.restore.outputs.value }}' | jq -c 'if (type == "array" and length > 0 and (.[0] | has("issueUrl"))) then map({findings: [del(.issueUrl)], issue: {url: .issueUrl}}) else . end' )" >> $GITHUB_OUTPUT
    - if: ${{ inputs.login_url && inputs.username && inputs.password && !inputs.auth_context }}
      name: Authenticate
      id: auth
      uses: github/accessibility-scanner/.github/actions/auth@smockle/backport-10-and-11-testing
      with:
        login_url: ${{ inputs.login_url }}
        username: ${{ inputs.username }}
        password: ${{ inputs.password }}
    - name: Find
      id: find
      uses: github/accessibility-scanner/.github/actions/find@smockle/backport-10-and-11-testing
      with:
        urls: ${{ inputs.urls }}
        auth_context: ${{ inputs.auth_context || steps.auth.outputs.auth_context }}
    - name: File
      id: file
      uses: github/accessibility-scanner/.github/actions/file@smockle/backport-10-and-11-testing
      with:
        findings: ${{ steps.find.outputs.findings }}
        repository: ${{ inputs.repository }}
        token: ${{ inputs.token }}
        cached_filings: ${{ steps.normalize_cache.outputs.value }}
    - if: ${{ steps.file.outputs.filings }}
      name: Get issues from filings
      id: get_issues_from_filings
      shell: bash
      run: |
        # Extract open issues from Filing objects and output as a single-line JSON array
        issues=$(jq -c '[.[] | select(.issue.state == "open") | .issue]' <<< '${{ steps.file.outputs.filings }}')
        echo "issues=$issues" >> "$GITHUB_OUTPUT"
    - if: ${{ inputs.skip_copilot_assignment != 'true' }}
      name: Fix
      id: fix
      uses: github/accessibility-scanner/.github/actions/fix@smockle/backport-10-and-11-testing
      with:
        issues: ${{ steps.get_issues_from_filings.outputs.issues }}
        repository: ${{ inputs.repository }}
        token: ${{ inputs.token }}
    - name: Set results output
      id: results
      uses: actions/github-script@v8
      with:
        script: |
          const filings = JSON.parse(process.env.FILINGS || '[]');
          const fixings = JSON.parse(process.env.FIXINGS || '[]');
          const fixingsByIssueUrl = fixings.reduce((acc, fixing) => {
            if (fixing.issue && fixing.issue.url) {
              acc[fixing.issue.url] = fixing;
            }
            return acc;
          }, {});
          const results = filings;
          for (const result of results) {
            if (result.issue && result.issue.url && fixingsByIssueUrl[result.issue.url]) {
              result.pullRequest = fixingsByIssueUrl[result.issue.url].pullRequest;
            }
          }
          core.setOutput('results', JSON.stringify(results));
          core.debug(`Results: ${JSON.stringify(results)}`);
      env:
        FILINGS: ${{ steps.file.outputs.filings }}
        FIXINGS: ${{ steps.fix.outputs.fixings }}
    - name: Save cached results
      uses: github/accessibility-scanner/.github/actions/gh-cache/cache@smockle/backport-10-and-11-testing
      with:
        key: ${{ inputs.cache_key }}
        value: ${{ steps.results.outputs.results }}
        token: ${{ inputs.token }}

branding:
  icon: "compass"
  color: "blue"
